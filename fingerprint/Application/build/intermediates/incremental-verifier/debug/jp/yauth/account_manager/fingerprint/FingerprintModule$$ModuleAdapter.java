// Code generated by dagger-compiler.  Do not edit.
package jp.yauth.account_manager.fingerprint;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class FingerprintModule$$ModuleAdapter extends ModuleAdapter<FingerprintModule> {
  private static final String[] INJECTS = { "members/jp.yauth.account_manager.fingerprint.MainActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public FingerprintModule$$ModuleAdapter() {
    super(jp.yauth.account_manager.fingerprint.FingerprintModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, FingerprintModule module) {
    bindings.contributeProvidesBinding("android.content.Context", new ProvidesContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.hardware.fingerprint.FingerprintManager", new ProvidesFingerprintManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.app.KeyguardManager", new ProvidesKeyguardManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("java.security.KeyStore", new ProvidesKeystoreProvidesAdapter(module));
    bindings.contributeProvidesBinding("java.security.KeyPairGenerator", new ProvidesKeyPairGeneratorProvidesAdapter(module));
    bindings.contributeProvidesBinding("java.security.Signature", new ProvidesSignatureProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.view.inputmethod.InputMethodManager", new ProvidesInputMethodManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.content.SharedPreferences", new ProvidesSharedPreferencesProvidesAdapter(module));
    bindings.contributeProvidesBinding("jp.yauth.account_manager.fingerprint.server.StoreBackend", new ProvidesStoreBackendProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final FingerprintModule module;

    public ProvidesContextProvidesAdapter(FingerprintModule module) {
      super("android.content.Context", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.providesContext();
    }
  }

  /**
   * A {@code Binding<android.hardware.fingerprint.FingerprintManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.hardware.fingerprint.FingerprintManager} and its
   * dependencies.
   *
   * Being a {@code Provider<android.hardware.fingerprint.FingerprintManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesFingerprintManagerProvidesAdapter extends ProvidesBinding<android.hardware.fingerprint.FingerprintManager>
      implements Provider<android.hardware.fingerprint.FingerprintManager> {
    private final FingerprintModule module;
    private Binding<android.content.Context> context;

    public ProvidesFingerprintManagerProvidesAdapter(FingerprintModule module) {
      super("android.hardware.fingerprint.FingerprintManager", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesFingerprintManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", FingerprintModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.hardware.fingerprint.FingerprintManager>}.
     */
    @Override
    public android.hardware.fingerprint.FingerprintManager get() {
      return module.providesFingerprintManager(context.get());
    }
  }

  /**
   * A {@code Binding<android.app.KeyguardManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.app.KeyguardManager} and its
   * dependencies.
   *
   * Being a {@code Provider<android.app.KeyguardManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesKeyguardManagerProvidesAdapter extends ProvidesBinding<android.app.KeyguardManager>
      implements Provider<android.app.KeyguardManager> {
    private final FingerprintModule module;
    private Binding<android.content.Context> context;

    public ProvidesKeyguardManagerProvidesAdapter(FingerprintModule module) {
      super("android.app.KeyguardManager", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesKeyguardManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", FingerprintModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.KeyguardManager>}.
     */
    @Override
    public android.app.KeyguardManager get() {
      return module.providesKeyguardManager(context.get());
    }
  }

  /**
   * A {@code Binding<java.security.KeyStore>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.security.KeyStore>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesKeystoreProvidesAdapter extends ProvidesBinding<java.security.KeyStore>
      implements Provider<java.security.KeyStore> {
    private final FingerprintModule module;

    public ProvidesKeystoreProvidesAdapter(FingerprintModule module) {
      super("java.security.KeyStore", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesKeystore");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.security.KeyStore>}.
     */
    @Override
    public java.security.KeyStore get() {
      return module.providesKeystore();
    }
  }

  /**
   * A {@code Binding<java.security.KeyPairGenerator>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.security.KeyPairGenerator>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesKeyPairGeneratorProvidesAdapter extends ProvidesBinding<java.security.KeyPairGenerator>
      implements Provider<java.security.KeyPairGenerator> {
    private final FingerprintModule module;

    public ProvidesKeyPairGeneratorProvidesAdapter(FingerprintModule module) {
      super("java.security.KeyPairGenerator", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesKeyPairGenerator");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.security.KeyPairGenerator>}.
     */
    @Override
    public java.security.KeyPairGenerator get() {
      return module.providesKeyPairGenerator();
    }
  }

  /**
   * A {@code Binding<java.security.Signature>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code java.security.Signature} and its
   * dependencies.
   *
   * Being a {@code Provider<java.security.Signature>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesSignatureProvidesAdapter extends ProvidesBinding<java.security.Signature>
      implements Provider<java.security.Signature> {
    private final FingerprintModule module;
    private Binding<java.security.KeyStore> keyStore;

    public ProvidesSignatureProvidesAdapter(FingerprintModule module) {
      super("java.security.Signature", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesSignature");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      keyStore = (Binding<java.security.KeyStore>) linker.requestBinding("java.security.KeyStore", FingerprintModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(keyStore);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.security.Signature>}.
     */
    @Override
    public java.security.Signature get() {
      return module.providesSignature(keyStore.get());
    }
  }

  /**
   * A {@code Binding<android.view.inputmethod.InputMethodManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.view.inputmethod.InputMethodManager} and its
   * dependencies.
   *
   * Being a {@code Provider<android.view.inputmethod.InputMethodManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesInputMethodManagerProvidesAdapter extends ProvidesBinding<android.view.inputmethod.InputMethodManager>
      implements Provider<android.view.inputmethod.InputMethodManager> {
    private final FingerprintModule module;
    private Binding<android.content.Context> context;

    public ProvidesInputMethodManagerProvidesAdapter(FingerprintModule module) {
      super("android.view.inputmethod.InputMethodManager", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesInputMethodManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", FingerprintModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.view.inputmethod.InputMethodManager>}.
     */
    @Override
    public android.view.inputmethod.InputMethodManager get() {
      return module.providesInputMethodManager(context.get());
    }
  }

  /**
   * A {@code Binding<android.content.SharedPreferences>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.content.SharedPreferences} and its
   * dependencies.
   *
   * Being a {@code Provider<android.content.SharedPreferences>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesSharedPreferencesProvidesAdapter extends ProvidesBinding<android.content.SharedPreferences>
      implements Provider<android.content.SharedPreferences> {
    private final FingerprintModule module;
    private Binding<android.content.Context> context;

    public ProvidesSharedPreferencesProvidesAdapter(FingerprintModule module) {
      super("android.content.SharedPreferences", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesSharedPreferences");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", FingerprintModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.SharedPreferences>}.
     */
    @Override
    public android.content.SharedPreferences get() {
      return module.providesSharedPreferences(context.get());
    }
  }

  /**
   * A {@code Binding<jp.yauth.account_manager.fingerprint.server.StoreBackend>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<jp.yauth.account_manager.fingerprint.server.StoreBackend>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidesStoreBackendProvidesAdapter extends ProvidesBinding<jp.yauth.account_manager.fingerprint.server.StoreBackend>
      implements Provider<jp.yauth.account_manager.fingerprint.server.StoreBackend> {
    private final FingerprintModule module;

    public ProvidesStoreBackendProvidesAdapter(FingerprintModule module) {
      super("jp.yauth.account_manager.fingerprint.server.StoreBackend", NOT_SINGLETON, "jp.yauth.account_manager.fingerprint.FingerprintModule", "providesStoreBackend");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<jp.yauth.account_manager.fingerprint.server.StoreBackend>}.
     */
    @Override
    public jp.yauth.account_manager.fingerprint.server.StoreBackend get() {
      return module.providesStoreBackend();
    }
  }
}
